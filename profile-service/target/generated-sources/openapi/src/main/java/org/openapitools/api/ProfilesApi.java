/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ErrorResponse;
import org.openapitools.model.Profile;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-25T09:09:14.850999+02:00[Europe/Budapest]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "profiles", description = "the profiles API")
public interface ProfilesApi {

    /**
     * POST /profiles
     * Maak een nieuw profiel
     *
     * @param profile  (required)
     * @return OK (status code 201)
     *         or Resource already exists (status code 409)
     */
    @Operation(
        operationId = "createProfile",
        description = "Maak een nieuw profiel",
        tags = { "profiles" },
        responses = {
            @ApiResponse(responseCode = "201", description = "OK", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "409", description = "Resource already exists", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/profiles",
        produces = { "text/plain", "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<String> createProfile(
        @Parameter(name = "Profile", description = "", required = true) @Valid @RequestBody Profile profile
    );


    /**
     * DELETE /profiles/{username}
     * verwijder een profiel
     *
     * @param username  (required)
     * @return OK (status code 204)
     */
    @Operation(
        operationId = "deleteProfile",
        description = "verwijder een profiel",
        tags = { "profiles" },
        responses = {
            @ApiResponse(responseCode = "204", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/profiles/{username}"
    )
    
    ResponseEntity<Void> deleteProfile(
        @Parameter(name = "username", description = "", required = true, in = ParameterIn.PATH) @PathVariable("username") String username
    );


    /**
     * GET /profiles
     * Haal alle bestaande profielen op
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAllProfiles",
        description = "Haal alle bestaande profielen op",
        tags = { "profiles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Profile.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/profiles",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Profile>> getAllProfiles(
        
    );


    /**
     * GET /profiles/{username}
     * Haal een enkel profiel op
     *
     * @param username  (required)
     * @return OK (status code 200)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getSingleProfile",
        description = "Haal een enkel profiel op",
        tags = { "profiles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Profile.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/profiles/{username}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Profile> getSingleProfile(
        @Parameter(name = "username", description = "", required = true, in = ParameterIn.PATH) @PathVariable("username") String username
    );


    /**
     * PUT /profiles/{username}
     * pas een bestaand profiel aan
     *
     * @param username  (required)
     * @param profile  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateProfile",
        description = "pas een bestaand profiel aan",
        tags = { "profiles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/profiles/{username}",
        produces = { "text/plain" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<String> updateProfile(
        @Parameter(name = "username", description = "", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "Profile", description = "", required = true) @Valid @RequestBody Profile profile
    );

}
