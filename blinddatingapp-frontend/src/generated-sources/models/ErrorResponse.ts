/* tslint:disable */
/* eslint-disable */
/**
 * Profile Service API
 * Profile Service api definitie
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FieldError } from './FieldError';
import {
    FieldErrorFromJSON,
    FieldErrorFromJSONTyped,
    FieldErrorToJSON,
} from './FieldError';

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * a URI identifier that categorizes the error
     * @type {string}
     * @memberof ErrorResponse
     */
    type?: string;
    /**
     * a brief, human-readable message about the error
     * @type {string}
     * @memberof ErrorResponse
     */
    title?: string;
    /**
     * the HTTP response code (optional)
     * @type {number}
     * @memberof ErrorResponse
     */
    status?: number;
    /**
     * a human-readable explanation of the error
     * @type {string}
     * @memberof ErrorResponse
     */
    detail?: string;
    /**
     * a URI that identifies the specific occurrence of the error
     * @type {string}
     * @memberof ErrorResponse
     */
    instance?: string;
    /**
     * 
     * @type {Array<FieldError>}
     * @memberof ErrorResponse
     */
    errors?: Array<FieldError>;
}

/**
 * Check if a given object implements the ErrorResponse interface.
 */
export function instanceOfErrorResponse(value: object): value is ErrorResponse {
    return true;
}

export function ErrorResponseFromJSON(json: any): ErrorResponse {
    return ErrorResponseFromJSONTyped(json, false);
}

export function ErrorResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'title': json['title'] == null ? undefined : json['title'],
        'status': json['status'] == null ? undefined : json['status'],
        'detail': json['detail'] == null ? undefined : json['detail'],
        'instance': json['instance'] == null ? undefined : json['instance'],
        'errors': json['errors'] == null ? undefined : ((json['errors'] as Array<any>).map(FieldErrorFromJSON)),
    };
}

export function ErrorResponseToJSON(value?: ErrorResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'type': value['type'],
        'title': value['title'],
        'status': value['status'],
        'detail': value['detail'],
        'instance': value['instance'],
        'errors': value['errors'] == null ? undefined : ((value['errors'] as Array<any>).map(FieldErrorToJSON)),
    };
}

